services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:latest
    platform: linux/amd64  # Para Mac con Apple Silicon
    container_name: sqlserver
    ports:
      - "0.0.0.0:1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "TuPasswordSeguro123"
      MSSQL_PID: "Developer"  # Usar la edición Developer (más ligera)
    volumes:
      - sqlserver_data:/var/opt/mssql
      - sql_backups:/var/opt/mssql/backup   # Volumen nombrado para backups

    networks:
      - red_privada
    restart: always
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 6G

  ## Servicio para inicializar la base de datos
  init-db:
    image: mcr.microsoft.com/mssql-tools
    platform: linux/amd64
    networks:
      - red_privada
    depends_on:
      - sqlserver
    volumes:
      - sqlserver_data:/var/opt/mssql
      - sql_backups:/var/opt/mssql/backup # Montar el volumen de backups    
    command: >
      /bin/bash -c "
      echo 'Esperando a que SQL Server esté listo...' &&
      for i in {1..60}; do
        echo \"Intento $$i de 60...\" &&
        if /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P TuPasswordSeguro123 -Q 'SELECT 1;' &>/dev/null; then
          echo 'SQL Server está listo.' &&
          break
        fi
        if [ $$i -eq 60 ]; then
          echo 'Error: SQL Server no está respondiendo después de múltiples intentos.' &&
          exit 1
        fi
        echo 'SQL Server aún no está listo. Esperando...' &&
        sleep 5
      done &&
      
      echo 'Creando base de datos si no existe...' &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P TuPasswordSeguro123 -Q '
      IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = \"becas_uv\")
      BEGIN
          CREATE DATABASE becas_uv;
          PRINT \"Base de datos becas_uv creada correctamente.\";
      END
      ELSE
      BEGIN
          PRINT \"La base de datos becas_uv ya existe.\";
      END
      ' &&

      echo 'Verificando estado de la base de datos...' &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P TuPasswordSeguro123 -Q 'SELECT name, state_desc FROM sys.databases WHERE name = \"becas_uv\"' &&
      
      echo 'Listando tablas en la base de datos restaurada:' &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P TuPasswordSeguro123 -d becas_uv -Q 'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \"BASE TABLE\" ORDER BY TABLE_NAME' &&

      echo 'Configurando tabla users...' &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P TuPasswordSeguro123 -d becas_uv -Q '
      IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = \"users\")
      BEGIN
          CREATE TABLE users (
              id INT IDENTITY(1,1) PRIMARY KEY,
              usuario VARCHAR(50) NOT NULL,
              password VARCHAR(255) NOT NULL,
              role VARCHAR(20) NOT NULL,
              casino VARCHAR(50) NOT NULL
          );
          PRINT \"Tabla users creada.\";
      END
      ' &&

      echo 'Configurando tabla casinos...' &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P TuPasswordSeguro123 -d becas_uv -Q '
      IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = \"casinos\")
      BEGIN
          CREATE TABLE casinos (
              id INT IDENTITY(1,1) PRIMARY KEY,
              nombre VARCHAR(MAX) NULL,
              cantidad INT NULL
          );
      END
      ' &&

      echo 'Configurando tabla alumnos...' &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P TuPasswordSeguro123 -d becas_uv -Q '
      IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = \"alumnos\")
      BEGIN
          CREATE TABLE alumnos (
              id INT IDENTITY(1,1) PRIMARY KEY,
              nombre VARCHAR(70) NULL,
              rut VARCHAR(20) NULL,
              cantidad INT NULL,
              canje INT NULL,
              fecha CHAR(20) NULL
          );
      END
      ' &&

      echo 'Insertando usuarios predeterminados...' &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P TuPasswordSeguro123 -d becas_uv -Q '
      IF NOT EXISTS (SELECT * FROM users WHERE usuario = \"Ad\")
      BEGIN
          INSERT INTO users (usuario, password, role, casino) VALUES (\"Ad\", \"A5\", \"Administrador\", \"Casino1\");
      END
      IF NOT EXISTS (SELECT * FROM users WHERE usuario = \"Administrador\")
      BEGIN
          INSERT INTO users (usuario, password, role, casino) VALUES (\"Administrador\", \"$$2a$$10$$mj1yog7/mo6YnbhNhRWw7.xl7ZLDD0fu0g/ZxV9icb3FjXSxwR12q\", \"admin\", \"Casino1\");
      END
      IF NOT EXISTS (SELECT * FROM users WHERE usuario = \"admin\")
      BEGIN
          INSERT INTO users (usuario, password, role, casino) VALUES (\"admin\", \"12345\", \"Administrador\", \"Casino1\");
      END
      ' &&

      echo 'Mostrando usuarios:' &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P TuPasswordSeguro123 -d becas_uv -Q 'SELECT * FROM users'
        "


  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    command: ["forego", "start", "-r"]
    environment:
      - SERVER_TOKENS=off
      - PROXY_CONNECT_TIMEOUT=300
      - PROXY_SEND_TIMEOUT=300
      - PROXY_READ_TIMEOUT=90m
      - SEND_TIMEOUT=300
      - CLIENT_MAX_BODY_SIZE=1024M
    networks:
      - red_proxy

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    restart: always
    ports:
      - "0.0.0.0:4000:4000/tcp"  # Mapeo para IPv4
    depends_on:
      - sqlserver
    networks:
      - red_proxy
      - red_privada
    environment:
      - DB_USER=sa
      - DB_PASSWORD=TuPasswordSeguro123
      - DB_SERVER=sqlserver
      - DB_NAME=becas_uv
      
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    restart: always
    ports:
      - "0.0.0.0:4200:4200"  # Mapeo para IPv4
    networks:
      - red_proxy
      - red_privada

networks:
  red_proxy:
    external: true
    name: nginx-proxy
  red_privada:
    driver: bridge
volumes:
  sqlserver_data:
    driver: local
  sql_backups:
    driver: local